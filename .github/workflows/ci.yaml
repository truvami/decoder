name: CI 🚧

on:
  push:
    paths:
      - "**.go"
      - "**.md"
      - "**.mod"
      - ".github/workflows/**.yaml"

jobs:
  lint-and-format:
    name: Lint & Format 🧹
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
          cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install detect-secrets yamllint

      - name: go mod tidy check
        run: |
          cp go.mod go.mod.prev
          cp go.sum go.sum.prev
          go mod tidy
          diff -u go.mod.prev go.mod || (echo "::error file=go.mod::Run 'go mod tidy' and commit changes."; exit 1)
          diff -u go.sum.prev go.sum || (echo "::error file=go.sum::Run 'go mod tidy' and commit changes."; exit 1)

      - name: go fmt (no diffs allowed)
        run: |
          CHANGED=$(gofmt -s -l . || true)
          if [ -n "$CHANGED" ]; then
            echo "::error ::Run 'gofmt -s -w .' to format:"
            echo "$CHANGED"
            exit 1
          fi

      - name: go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: staticcheck
        run: $(go env GOPATH)/bin/staticcheck ./...

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58

      - name: Run JSON tags camelCase check
        run: make check-json-tags

      - name: Check Prometheus metrics
        run: make check-metrics

      - name: Run yamllint
        run: yamllint .

      - name: Check for uncommitted changes
        run: |
          git diff --exit-code || (echo "::error::Generated code is not up to date. Run 'make generate' and commit changes."; exit 1)

      - name: Detect secrets
        run: |
          echo "🔍 Scanning for secrets..."
          if command -v detect-secrets >/dev/null 2>&1; then
            detect-secrets scan --baseline .secrets.baseline --all-files || echo "Secret detection completed with findings"
            if [ -f ".secrets.baseline" ]; then
              detect-secrets audit .secrets.baseline --statistics || echo "Baseline audit completed"
            fi
          else
            echo "detect-secrets not available, skipping secret scan (basic validation will still run)"
          fi

      - name: Secret Scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown

  test-coverage:
    name: Test & Coverage 🧪
    runs-on: ubuntu-latest
    env:
      ENV: test
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
          cache: true

      - name: Generate test coverage
        run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check test coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          config: ./.testcoverage.yml
          profile: cover.out
          local-prefix: github.com/truvami/decoder
          threshold-file: 75
          threshold-package: 80
          threshold-total: 80
